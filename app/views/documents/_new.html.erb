<%= bootstrap_form_for(document, html: {class: 'dropzone'}) do |f| %>
    <%= f.hidden_field :scheme_mix_criterion, value: scheme_mix_criterion_id %>
    <div class="fallback">
        <%= f.file_field :document_file, hide_label: true %>
        <%= f.primary 'Upload documentation' %>
    </div>
<% end %>

<div id="dropzone-previews" class="table table-striped table-bordered" style="display:none;">
    <div class="file-row header">
        <div><strong>File name</strong></div>
        <div><strong>File size</strong></div>
        <div><strong>Upload progress</strong></div>
        <div><strong>Actions</strong></div>
    </div>
</div>
<button id="dropzone-upload-all" class="btn btn-primary" style="display:none;">Upload documentation</button>

<div id="dropzone-modal" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="dropzone-modal-title">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header alert-danger">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">Ã—</span></button>
                <h4 class="modal-title" id="dropzone-modal-title"></h4>
            </div>
            <div class="modal-body"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-white" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<% content_for :js do %>
    <script type="text/javascript">
        var dropzoneUploading = false;

        $(function() {
            Dropzone.options.newDocument = {
                autoProcessQueue: false, // Prevents Dropzone from uploading dropped files immediately
                paramName: 'document[document_file]',
                parallelUploads: 5,
                dictDefaultMessage: 'Drop files here or click to upload documentation.',
                previewsContainer: '#dropzone-previews',
                previewTemplate: '<div class="file-row"> <div><p class="name" data-dz-name></p><strong class="error text-danger" data-dz-errormessage></strong></div> <div><p class="size" data-dz-size></p></div> <div> <div class="progress progress-striped active" role="progressbar" aria-valuemin="0" aria-valuemax="100" aria-valuenow="0"> <div class="progress-bar progress-bar-success" style="width:0%;" data-dz-uploadprogress></div> </div> </div> <div> <a href="#" data-dz-remove> <i title="Delete" class="fa fa-lg fa-trash" style="padding-right: 10px;"></i></a> </div> </div>',
                maxFilesize: <%= Document::MAXIMUM_DOCUMENT_FILE_SIZE %>, // in MB
                acceptedFiles: '<%= DocumentUploader.new.extension_white_list_js %>',

                init: function () {
                    var documentsDropzone = this;
                    var dropzoneForm = $('#new_document');
                    var dropzoneModal = $("#dropzone-modal");
                    var uploadButton = $("#dropzone-upload-all");
                    var previewsContainer = $("#dropzone-previews");
                    var uploadErrors = [];

                    // Process all queued files when the upload button is clicked
                    uploadButton.click(function (e) {
                        // All rejected files should first be removed from the queue list
                        if (documentsDropzone.getRejectedFiles().length > 0) {
                            // Show a modal box
                            dropzoneModal.find('.modal-title').html('<i class="fa fa-exclamation-circle"></i>&nbsp;&nbsp;Validation error');
                            dropzoneModal.find('.modal-body').html('Please remove all invalid files before uploading.');
                            dropzoneModal.find('.modal-header').attr('class', 'modal-header alert-danger');
                            dropzoneModal.modal('show');
                        }
                        else {
                            dropzoneUploading = true;
                            documentsDropzone.processQueue();
                        }
                        e.preventDefault;
                    });

                    // Show the previews container and upload button when one or more files are added
                    this.on("addedfile", function () {
                        previewsContainer.show();
                        uploadButton.show();
                    });
                    // Hide the previews container and upload button when all files are removed
                    this.on("removedfile", function () {
                        if (previewsContainer.children().length == 1) {
                            previewsContainer.hide();
                            uploadButton.hide();
                        }
                    });
                    // Once the upload button is clicked, the full queue can be processed
                    this.on("processing", function () {
                        this.options.autoProcessQueue = true;
                        uploadButton.html('<i class="fa fa-lg fa-cog fa-spin"></i>&nbsp;&nbsp;Uploading documentation...');
                        uploadButton.prop('disabled', true);
                        dropzoneForm.hide();
                    });
                    // Catch all server errors
                    this.on("error", function (file, errorMessage, XMLHttpRequest) {
                        // Errors returned by the server
                        if (XMLHttpRequest !== undefined) {
                            uploadErrors.push('<strong>' + file.name + '</strong>: ' + errorMessage);
                        }
                        // Errors on the client side
                        else {
                            // These errors are shown in the file row
                        }
                    });
                    // Notify the user when all uploads are completed
                    this.on("queuecomplete", function () {
                        if (dropzoneUploading) {
                            var modalBody = '';
                            var modalHeaderClass = '';

                            // There were server errors during the upload
                            if (uploadErrors.length > 0) {
                                modalBody = '<div>Some documents weren\'t successfully uploaded because of the following errors:</div>';

                                modalBody += '<ul>';
                                $.each(uploadErrors, function(index, uploadError) {
                                    modalBody += '<li>' + uploadError + '</li>';
                                });
                                modalBody += '</ul>';

                                modalBody += '<div>All other documentation was uploaded successfully.</div>';
                                modalHeaderClass = 'alert-warning';
                            }
                            // There were no errors
                            else {
                                modalBody = 'All documentation was successfully uploaded.';
                                modalHeaderClass = 'alert-success';
                            }

                            // Show a modal box
                            dropzoneModal.find('.modal-title').html('<i class="fa fa-check-circle"></i>&nbsp;&nbsp;Uploading completed');
                            dropzoneModal.find('.modal-body').html(modalBody);
                            dropzoneModal.find('.modal-header').attr('class', 'modal-header ' + modalHeaderClass);
                            dropzoneModal.modal('show');
                        }
                    });
                }
            };

            // Handle closing of modal box
            $('#dropzone-modal').on('hide.bs.modal', function (e) {
                // Reload the page when the upload notification is closed by the user
                if (dropzoneUploading) {
                    location.reload();
                }
            })
        });
    </script>
<% end %>

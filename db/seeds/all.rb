# Category's
Category.create!(code: 'UC', name: 'Urban Connectivity')
Category.create!(code: 'S', name: 'Site')
Category.create!(code: 'E', name: 'Energy')
Category.create!(code: 'W', name: 'Water')
Category.create!(code: 'M', name: 'Materials')
Category.create!(code: 'IE', name: 'Indoor Environment')
Category.create!(code: 'CE', name: 'Cultural & Economic')
Category.create!(code: 'MO', name: 'Management & Operations')

# Criteria (created from GSAS Gate html files, using GSASScraper project)
Criterion.create!(name: "Accessibility", description: "<p>Encourage site selection near access to existing pedestrian and bicycle pathway networks, as well as intended users, in order to reduce vehicular transportation needs.</p>\n<p>&nbsp;</p>", measurement: "<p>All projects will complete the Accessibility Calculator to determine the number of accessible entrances provided by the site, the length of the site perimeter, the number of average daily users the site is intended to serve, and the number of users within 480 meters of accessible entrances.</p>\n<p>All projects will provide a site plan that will include an area around the site at least 480 meters on all sides. Include on the site plan: </p>\n<ul>\n<li><span>&bull;\t</span>All off-site pedestrian pathway networks, bicycle lanes, and bicycle trails within 480 meters</li>\n<li><span>&bull;\t</span>All site entrances, as defined by:</li>\n</ul>\n<ol>\n<li><span>1.\t</span>Any intentional break in an impassible site boundary, designed to allow entrance</li>\n<li><span>2.\t</span>The first intersection of any outside road, pedestrian pathway, or bicycle trail with an open, passable site boundary<span></span></li>\n</ol>\n<ul>\n<li><span>&bull;\t</span>All site entrances which may be considered accessible, as defined by:</li>\n</ul>\n<ol>\n<li><span>1.\t</span>Entrance is accessible if it intersects with an existing pedestrian pathway network extending at least 480 meters away from the site</li>\n<li><span>2.\t</span>Entrance is accessible if it is located within 480 meters of a bicycle trail or dedicated bicycle lane network and includes bicycle racks </li>\n</ol>\n<p>&nbsp;</p>", measurement_principle: "<p>All projects will be located in proximity to pedestrian and bicycle pathway access, as well as intended users. </p>\n<p>&nbsp;</p>", category: Category.find_by_code("UC"))
Criterion.create!(name: "Acoustic Conditions", description: "<p>Encourage selection of a project site with the least amount of noise exposure.</p>", measurement: "<p>Option 1</p>\n<p>All projects will use the Acoustic Conditions Calculator to determine the Day-Night Average Sound Level (DNL) exposure of the site. The project should demonstrate that the DNL is within an acceptable noise range through the use of existing noise contours or measurement methods that are based on guidelines of the U.S. Department of Housing and Urban Development, Office of Policy Development and Research.<span></span></p>\n<p>Option 2</p>\n<p>Refer to S9 Noise Pollution to identify as described in noise level pre-development (Pg. 241) measurement section.  </p>\n<p>Use the measured DNL for the project to obtain the score for this criteria.</p>", measurement_principle: "<p>All projects will measure the average combined Day-Night noise level exposure of the site to traffic and aircraft noise.</p>", category: Category.find_by_code("UC"))
Criterion.create!(name: "Load on Local Traffic Conditions", description: "<p>Minimize the impact on local traffic conditions.</p>\n<p>&nbsp;</p>", measurement: "<p>For all stand-alone buildings that are not part of a development, the project will complete the Load on Local Traffic Conditions Calculator to determine the traffic delay increase between pre-and post-development conditions. </p>\n<p>For all buildings that are part of a development, the project will create a traffic study report that includes the following elements:</p>\n<ul>\n<li><span>&bull;\t</span>Analysis of existing traffic conditions</li>\n<li><span>&bull;\t</span>Calculations for the delay time during peak hours at existing intersections, pre- and post-development, to estimate the added traffic load due to the project</li>\n<li><span>&bull;\t</span>Strategies to mitigate the impact of increased delays due to the additional traffic load</li>\n<li><span>&bull;\t</span>Revised calculations for the delay time, post-development, due to the implementation of the recommended strategies</li>\n</ul>\n<p>&nbsp;</p>", measurement_principle: "<p>All projects will evaluate the effects of additional traffic loads due to new development on existing major arterials. All projects will analyze existing traffic conditions and calculate traffic delay time during peak hours (morning peak hours and afternoon peak hours) for pre- and post-development conditions. </p>\n<p>&nbsp;</p>\n<p>MOSQUES</p>\n<p>Project will analyze existing traffic conditions and calculate traffic delay time during the peak hours immediately following the Friday midday prayer for pre- and post-development conditions.</p>\n<p> </p>", category: Category.find_by_code("UC"))
Criterion.create!(name: "Private Transportation", description: "<p>Reduce the use of private transportation to ease the impact on traffic congestion and harmful emissions.</p>\n<p>&nbsp;</p>", measurement: "<p>All projects will complete the Private Transportation Calculator. The calculator computes the percentage of users accommodated by alternative forms of transportation from the maximum building occupancy level, including staff and visitors. <span></span></p>\n<p>&nbsp;</p>", measurement_principle: "<p>All projects will implement strategies to reduce the use of private transportation by providing support facilities for alternative forms of transportation. </p>\n<p>&nbsp;</p>", category: Category.find_by_code("UC"))
Criterion.create!(name: "Proximity to Amenities", description: "<p>Encourage development near pedestrian accessible amenities in order to reduce transportation needs.</p>\n<p>&nbsp;</p>", measurement: "<p>All projects will complete the Proximity to Amenities Calculator and identify on a site map all the amenities that are located within short walking or driving distance from the proposed site, measured from the entry/exit point of the project. Amenities are broken into five categories according to usage type as follows:</p>\n<p>Use Categories</p>\n<ul>\n<li><span>&bull;\t</span>Public Services</li>\n<li><span>&bull;\t</span>Places of Worship</li>\n<li><span>&bull;\t</span>Retail - Services</li>\n<li><span>&bull;\t</span>Retail - Goods</li>\n<li><span>&bull;\t</span>Retail - Food</li>\n</ul>\n<p>&nbsp;</p>\n<p>All amenities must fall within these categories. Projects will be scored on the total quantity of their amenities as well as the diversity between the use categories. <span></span></p>\n<p>The Proximity to Amenities Calculator computes the criterion score based on the total number of amenities accessible to the project occupants within a 480 meters walking distance range. The number of amenities is weighted according to the walking distance in increasing increments in order to calculate a Performance Indicator.</p>\n<p>&nbsp;</p>", measurement_principle: "<p>All projects will be located in proximity to various types of basic amenities with pedestrian access between the project and the services.</p>\n<p>&nbsp;</p>", category: Category.find_by_code("UC"))
Criterion.create!(name: "Proximity to Infrastructure", description: "<p>Minimize the amount of new infrastructure construction by selecting a site near available connections to existing infrastructure or seeking on-site &ldquo;off-grid&rdquo; solutions.<span></span></p>\n<p>&nbsp;</p>", measurement: "<p>All projects will complete the Proximity to Infrastructure Calculator to determine the percentage of the infrastructure needs that can be met by existing, available infrastructure connections or through alternative on-site solutions. A type of infrastructure is considered to have an available connection if it is present on-site or at a neighboring property within 1 km and has or planned to have the capacity to support the infrastructure load of the building.</p>\n<p>&nbsp;</p>", measurement_principle: "<p>All projects will minimize the amount of new infrastructure construction required to meet the needs of the building. </p>\n<p>&nbsp;</p>", category: Category.find_by_code("UC"))
Criterion.create!(name: "Public Transportation", description: "<p>Encourage development near access to effective public transportation networks in order to reduce private transportation needs.</p>\n<p>&nbsp;</p>", measurement: "<p>All projects will complete the Public Transportation Calculator and identify on a site map the public transport stops within 480 meters of the proposed site. The distance is measured from the building&rsquo;s primary entry/exit point to the public transportation stop. </p>\n<p>All projects will measure existing or planned public transportation stops that will be accessible at the time of the project&rsquo;s completion. Public transportation stops may only be counted once per each specific location, including stops that serve varying forms of public transportation or multiple directions of traffic. Public transportation modes may include buses, trams and trains, or rapid transit.</p>\n<p>&nbsp;</p>", measurement_principle: "<p>All projects will be located in proximity to public transportation access.</p>\n<p>&nbsp;</p>", category: Category.find_by_code("UC"))
Criterion.create!(name: "Sewer &amp; Waterway Contamination", description: "<p>Avoid contamination of waterways to reduce the burden on public treatment facilities.</p>\n<p>&nbsp;</p>", measurement: "<p>All projects will develop a Sewer &amp; Waterway Contamination Plan to collect and remove all toxic or harmful substances. Toxic or harmful substances include any solids, sludge, floating debris, oil, scum, or any substances associated with the industrial process.</p>\n<p>&nbsp;</p>", measurement_principle: "<p>All projects will develop and implement a Sewer &amp; Waterway Contamination Plan to collect and remove all harmful or toxic substances discharged from the site.</p>\n<p>&nbsp;</p>", category: Category.find_by_code("UC"))
# Criterion.create!(name: 'Land Preservation', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Water Body Preservation', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Habitat Preservation', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Vegetation', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Desertification', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Rainwater Runoff', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Heat Island Effect', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Adverse Wind Conditions', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Noise Pollution', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Light Pollution', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Shading of Adjacent Properties', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Parking Footprint', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Shading', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Illumination', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Pathways', category: Category.find_by_code('S'))
# Criterion.create!(name: 'Mixed Use', category: Category.find_by_code('S'))
#
# Criterion.create!(name: 'Energy Demand Performance', category: Category.find_by_code('E'))
# Criterion.create!(name: 'Energy Delivery Performance', category: Category.find_by_code('E'))
# Criterion.create!(name: 'Fossil Fuel Conservation', category: Category.find_by_code('E'))
# Criterion.create!(name: 'CO2 Emissions', category: Category.find_by_code('E'))
# Criterion.create!(name: 'NOx, SOx, & Particulate Matter', category: Category.find_by_code('E'))
#
# Criterion.create!(name: 'Water Consumption', category: Category.find_by_code('W'))
#
# Criterion.create!(name: 'Regional Materials', category: Category.find_by_code('M'))
# Criterion.create!(name: 'Responsible Sourcing of Materials', category: Category.find_by_code('M'))
# Criterion.create!(name: 'Recycled Materials', category: Category.find_by_code('M'))
# Criterion.create!(name: 'Materials Reuse', category: Category.find_by_code('M'))
# Criterion.create!(name: 'Structure Reuse', category: Category.find_by_code('M'))
# Criterion.create!(name: 'Design for Disassembly', category: Category.find_by_code('M'))
#
# Criterion.create!(name: 'Thermal Comfort', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Natural Ventilation', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Mechanical Ventilation', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Illumination Levels', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Daylight', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Glare Control', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Views', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Acoustic Quality', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Low-Emitting Materials', category: Category.find_by_code('IE'))
# Criterion.create!(name: 'Indoor Chemical & Pollutant Source Control', category: Category.find_by_code('IE'))
#
# Criterion.create!(name: 'Heritage & Cultural Identity', category: Category.find_by_code('CE'))
# Criterion.create!(name: 'Support of National Economy', category: Category.find_by_code('CE'))
#
# Criterion.create!(name: 'Commissioning Plan', category: Category.find_by_code('MO'))
# Criterion.create!(name: 'Organic Waste Management', category: Category.find_by_code('MO'))
# Criterion.create!(name: 'Recycling Management', category: Category.find_by_code('MO'))
# Criterion.create!(name: 'Leak Detection', category: Category.find_by_code('MO'))
# Criterion.create!(name: 'Energy & Water Use Sub-metering', category: Category.find_by_code('MO'))
# Criterion.create!(name: 'Automated Control System', category: Category.find_by_code('MO'))
# Criterion.create!(name: 'Hospitality Management Plan', category: Category.find_by_code('MO'))
# Criterion.create!(name: 'Sustainability Education & Awareness Plan', category: Category.find_by_code('MO'))
# Criterion.create!(name: 'Building Legacy', category: Category.find_by_code('MO'))

# Custom criteria for release 1
Category.create!(code: 'EX', name: 'Energy (existing buildings)')
Category.create!(code: 'WX', name: 'Water (existing buildings)')
Criterion.create!(name: "Energy consumption", description: "TODO Energy consumption description", measurement: "TODO Energy consumption measurement", measurement_principle: "TODO Energy consumption measurement principle", category: Category.find_by_code('EX'))
Criterion.create!(name: "Water consumption", description: "TODO Water consumption description", measurement: "TODO Water consumption measurement", measurement_principle: "TODO Water consumption measurement principle", category: Category.find_by_code('WX'))

Certificate.create!(label: 'Letter of Conformance (currently not available)', certificate_type: :design_type, assessment_stage: :design_stage)
Certificate.create!(label: 'Final Design Certificate (currently not available)', certificate_type: :design_type, assessment_stage: :construction_stage)
Certificate.create!(label: 'Construction Certificate (currently not available)', certificate_type: :construction_type, assessment_stage: :construction_stage)
Certificate.create!(label: 'Operations Certificate', certificate_type: :operations_type, assessment_stage: :operations_stage)

Scheme.create!(label: 'Districts', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Districts', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Parks', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Parks', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Commercial', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Commercial', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Core + Shell', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Core + Shell', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Residential - Single', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Residential - Single', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Residential - Group', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Residential - Group', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Education', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Education', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Mosques', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Mosques', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Hotels', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Hotels', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Light Industry', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Light Industry', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Sports', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Sports', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Railways', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Railways', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Healthcare', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 0))
Scheme.create!(label: 'Healthcare', version: '3.0', certificate: Certificate.find_by(certificate_type: 0, assessment_stage: 1))
Scheme.create!(label: 'Construction', version: '3.0', certificate: Certificate.find_by(certificate_type: 1, assessment_stage: 1))
Scheme.create!(label: 'Operations', version: '3.0', certificate: Certificate.find_by(certificate_type: 2, assessment_stage: 2))
# todo: Scheme.create!(label: 'Workers\' Accommodation', version: '3.0')
# todo: Scheme.create!(label: 'Bespoke Schemes', version: '3.0')

operations_scheme = Scheme.find_by_label('Operations')
sc_op_ex1 = SchemeCriterion.create!(scheme: Scheme.find_by_label('Operations'), criterion: Criterion.find_by_name('Energy consumption'), weight: 5.2, code: 'EX.1')
sc_op_wx1 = SchemeCriterion.create!(scheme: Scheme.find_by_label('Operations'), criterion: Criterion.find_by_name('Water consumption'), weight: 16, code: 'WX.1')
Score.create!(score: -1, description: 'kWh<sub>year</sub> &gt; 25000',                  scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_ex1.criterion))
Score.create!(score: 0, description: '22500 &lt; kWh<sub>year</sub> &lte; 25000',        scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_ex1.criterion))
Score.create!(score: 1, description: '20000  &lt; kWh<sub>year</sub> &lte; 22500',        scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_ex1.criterion))
Score.create!(score: 2, description: '15000  &lt; kWh<sub>year</sub> &lte; 20000',        scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_ex1.criterion))
Score.create!(score: 3, description: 'kWh<sub>year</sub> &lte; 15000',                  scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_ex1.criterion))
Score.create!(score: -1, description: 'l<sub>year</sub> &gt; 5000',                 scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_wx1.criterion))
Score.create!(score: 0, description: '4000  &lt; l<sub>year</sub> &lte; 5000',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_wx1.criterion))
Score.create!(score: 1, description: '3000  &lt; l<sub>year</sub> &lte; 4000',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_wx1.criterion))
Score.create!(score: 2, description: '2000  &lt; l<sub>year</sub> &lte; 3000',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_wx1.criterion))
Score.create!(score: 3, description: 'l<sub>year</sub> &lte; 2000',                 scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: sc_op_wx1.criterion))
ec1 = Calculator.create!(name: 'Calculator::Dummy')
wc1 = Calculator.create!(name: 'Calculator::Dummy')
req1 = Requirement.create!(calculator: ec1, label: 'Energy calculator')
req2 = Requirement.create!(calculator: wc1, label: 'Water calculator')
req3 = Requirement.create!(label: 'Specifications and documentation regarding the available infrastructure showing that the existing structures can handle the additional load from the building')
SchemeCriteriaRequirement.create!(scheme_criterion: sc_op_ex1, requirement: req1)
SchemeCriteriaRequirement.create!(scheme_criterion: sc_op_wx1, requirement: req2)
SchemeCriteriaRequirement.create!(scheme_criterion: sc_op_ex1, requirement: req3)
Field.create!(label: 'Yearly energy usage', name: 'kwh_year', calculator: ec1, datum_type: 'FieldDatum::IntegerValue')
Field.create!(label: 'Yearly water usage', name: 'l_year', suffix: 'liter', help_text: 'Please provide the yearly water usage in liter.', calculator: wc1, datum_type: 'FieldDatum::IntegerValue')


# sc_op_e1 = SchemeCriterion.create!(scheme: Scheme.find_by_label('Operations'), criterion: Criterion.find_by_code('E.1'), weight: 5.2)
# sc_op_e2 = SchemeCriterion.create!(scheme: Scheme.find_by_label('Operations'), criterion: Criterion.find_by_code('E.2'), weight: 5.2)
# sc_op_e3 = SchemeCriterion.create!(scheme: Scheme.find_by_label('Operations'), criterion: Criterion.find_by_code('E.3'), weight: 3.64)
# sc_op_e4 = SchemeCriterion.create!(scheme: Scheme.find_by_label('Operations'), criterion: Criterion.find_by_code('E.4'), weight: 4.55)
# sc_op_e5 = SchemeCriterion.create!(scheme: Scheme.find_by_label('Operations'), criterion: Criterion.find_by_code('E.5'), weight: 5.42)
# sc_op_e6 = SchemeCriterion.create!(scheme: Scheme.find_by_label('Operations'), criterion: Criterion.find_by_code('W.1'), weight: 16)
#
# operations_scheme = Scheme.find_by_label('Operations')
# criterion_e1 = Criterion.find_by_code('E.1')
# criterion_e2 = Criterion.find_by_code('E.2')
# criterion_e3 = Criterion.find_by_code('E.3')
# criterion_e4 = Criterion.find_by_code('E.4')
# criterion_e5 = Criterion.find_by_code('E.5')
# criterion_w1 = Criterion.find_by_code('W.1')
#
# Score.create!(score: -1, description: 'EPC<sub>nd</sub> &gt; 1.0',                  scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e1))
# Score.create!(score: 0, description: '0.8  &lt; EPC<sub>nd</sub> &lte; 1.0',        scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e1))
# Score.create!(score: 1, description: '0.7  &lt; EPC<sub>nd</sub> &lte; 0.8',        scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e1))
# Score.create!(score: 2, description: '0.6  &lt; EPC<sub>nd</sub> &lte; 0.7',        scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e1))
# Score.create!(score: 3, description: 'EPC<sub>nd</sub> &lte; 0.6',                  scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e1))
# Score.create!(score: -1, description: 'EPC<sub>del</sub> &gt; 1.0',                 scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e2))
# Score.create!(score: 0, description: '0.8  &lt; EPC<sub>del</sub> &lte; 1.0',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e2))
# Score.create!(score: 1, description: '0.7  &lt; EPC<sub>del</sub> &lte; 0.8',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e2))
# Score.create!(score: 2, description: '0.6  &lt; EPC<sub>del</sub> &lte; 0.7',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e2))
# Score.create!(score: 3, description: 'EPC<sub>del</sub> &lte; 0.6',                 scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e2))
# Score.create!(score: -1, description: 'EPC<sub>p</sub> &gt; 1.0',                   scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e3))
# Score.create!(score: 0, description: '0.8  &lt; EPC<sub>p</sub> &lte; 1.0',         scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e3))
# Score.create!(score: 1, description: '0.7  &lt; EPC<sub>p</sub> &lte; 0.8',         scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e3))
# Score.create!(score: 2, description: '0.6  &lt; EPC<sub>p</sub> &lte; 0.7',         scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e3))
# Score.create!(score: 3, description: 'EPC<sub>p</sub> &lte; 0.6',                   scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e3))
# Score.create!(score: -1, description: 'EPC<sub>CO2</sub> &gt; 1.0',                 scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e4))
# Score.create!(score: 0, description: '0.8  &lt; EPC<sub>CO2</sub> &lte; 1.0',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e4))
# Score.create!(score: 1, description: '0.7  &lt; EPC<sub>CO2</sub> &lte; 0.8',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e4))
# Score.create!(score: 2, description: '0.6  &lt; EPC<sub>CO2</sub> &lte; 0.7',       scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e4))
# Score.create!(score: 3, description: 'EPC<sub>co2</sub> &lte; 0.6',                 scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e4))
# Score.create!(score: -1, description: 'EPC<sub>NOx-SOx</sub> &gt; 1.0',             scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e5))
# Score.create!(score: 0, description: '0.8  &lt; EPC<sub>NOx-SOx</sub> &lte; 1.0',   scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e5))
# Score.create!(score: 1, description: '0.7  &lt; EPC<sub>NOx-SOx</sub> &lte; 0.8',   scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e5))
# Score.create!(score: 2, description: '0.6  &lt; EPC<sub>NOx-SOx</sub> &lte; 0.7',   scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e5))
# Score.create!(score: 3, description: 'EPC<sub>NOx-SOx</sub> &lte; 0.6',             scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_e5))
# Score.create!(score: -1, description: 'X &gt; 1.0',                                 scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_w1))
# Score.create!(score: 0, description: '0.87  &lt; X &lte; 1.0',                      scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_w1))
# Score.create!(score: 1, description: '0.73  &lt; X &lte; 0.87',                     scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_w1))
# Score.create!(score: 2, description: '0.6  &lt; X &lte; 0.73',                      scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_w1))
# Score.create!(score: 3, description: 'X &lte; 0.6',                                 scheme_criterion: SchemeCriterion.find_by(scheme: operations_scheme, criterion: criterion_w1))
